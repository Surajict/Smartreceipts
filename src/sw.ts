/// <reference lib="webworker" />
import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching'

declare const self: ServiceWorkerGlobalScope

// Precache all the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST)

// Clean up outdated caches
cleanupOutdatedCaches()

// Handle push notifications (this enables Android OS-level notifications)
self.addEventListener('push', (event) => {
  console.log('Push notification received:', event)
  
  if (!event.data) {
    console.log('Push event has no data')
    return
  }

  try {
    const data = event.data.json()
    console.log('Push notification data:', data)

    const options: any = {
      body: data.body,
      icon: data.icon || '/Smart Receipt Logo.png',
      badge: data.badge || '/Smart Receipt Logo.png',
      data: data.data || {},
      requireInteraction: true, // Keep notification until user interacts
      tag: 'warranty-alert', // Prevents duplicate notifications
      renotify: true // Allow re-showing notifications with same tag
    }

    // Add actions if supported
    if ('actions' in Notification.prototype) {
      (options as any).actions = data.actions || [
        {
          action: 'view',
          title: 'View Details'
        },
        {
          action: 'dismiss',
          title: 'Dismiss'
        }
      ]
    }

    event.waitUntil(
      self.registration.showNotification(data.title || 'Smart Receipts', options)
    )
  } catch (error) {
    console.error('Error processing push notification:', error)
  }
})

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  console.log('Notification clicked:', event)
  
  event.notification.close()

  const action = event.action
  const data = event.notification.data || {}

  if (action === 'dismiss') {
    // Just close the notification
    return
  }

  // Default action or 'view' action - open the app
  event.waitUntil(
    self.clients.matchAll({ type: 'window' }).then((clientList) => {
      // If app is already open, focus it
      for (const client of clientList) {
        if (client.url === self.location.origin && 'focus' in client) {
          return client.focus()
        }
      }
      
      // If app is not open, open it
      if (self.clients.openWindow) {
        const url = data.url || '/'
        return self.clients.openWindow(url)
      }
    })
  )
})

// Handle notification close events
self.addEventListener('notificationclose', (event) => {
  console.log('Notification closed:', event)
  // You can track notification dismissals here if needed
})

// Handle background sync for offline notifications
self.addEventListener('sync', (event: any) => {
  if (event.tag === 'warranty-check') {
    event.waitUntil(
      // You could implement background warranty checking here
      console.log('Background sync for warranty check')
    )
  }
}) 